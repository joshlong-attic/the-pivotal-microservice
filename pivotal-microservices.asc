# The Pivotal Microservice
Josh Long
//:doctype: book
:numbered: false
:toc: left
:toclevels: 4
:source-highlighter: prettify
:code-root: spring-doge-microservice
:snippets-root: snippets


At Pivotal, we're building the best platform for today's workloads. One architecture style in particular - _microservices_ - seems to best capture what is typical, and best, in a lot of the applications we've seen deployed on our platform and with our technology.

Though our company is new (launched April 2013), we owe our rich heritage to the foundational groups and technologies (Spring, Cloud Foundry, Pivotal Labs, RabbitMQ, Redis, our Apache Tomcat leadership, Greenplum, Gemfire, our Groovy-language leadership, etc.) that launched Pivotal. All of these technologies followed their own trajectories to arrive here, at a time where our customers are building radically different applications  than those of even 10 years ago.

## How did we get here?
### Scale
The need for scale has changed the dynamics and economics of a modern applications and application architectures. We all know that Moore's law - named for Intel founder Gordon Moore - has not really been a law since the early 2000s when it became more cost effective to add more CPUs than to scale an individual CPU on a chip. To do more, applications would need to become more concurrent, to scale out. CSC claims that data-production will be 44000% larger in 2020 than 2009.

**Mobile technology** brought computers home. Many developing nations skipped terrestrial  telephony infrastructure altogether and instead went straight to mobile devices. When the era of the smart phone began in earnest with the iPhone (and Android soon thereafter), much of the world - not just the superpowers that had more ubiquitous access to computing infrastructure - ushered it in. This created a net-centric platform with access to untold millions (and billions) more that simply didn't exist before. Google's Larry Page said in 2012 that  http://www.androidcentral.com/larry-page-15-million-android-devices-activated-every-day[Google was seeing 15 million new Android devices activated] _every day_! iPhone activations tend to trend much further behind, but represents a staggering amount in any event, and taken together they represent a platform  that modern application developers would be foolish to ignore.

The **Internet-of-Things** is the logical extension of this growth. It is the idea that computing is immersive - a part of the everyday experience. We're already seeing it. The roads in Singapore, a small city-state in Asia, are connected via censors to a smart grid that helps operators understand (and optimize for) traffic patterns. You can buy refridgerators that are connected to the internet and that buy and sell their own power on the commodities markets!  The United Nations claims that by 2018, Earth will be home to 7.6 billion people and - by contrast - http://www.businessinsider.com/what-you-need-to-know-about-the-internet-of-things-2013-3?op=1#ixzz3FxCafwWe[there will be some 25 billion connected devices by 2015, and 50 billion by 2020, says Cisco, a maker of networking devices]. Of course, IPv6 is a reaction to this growth; after all, if you beleive Cisco, there'll be an average of more than 3 connected devices per person by 2015. This trend is obviously increasing with wearable computing (Google Glass, Apple iWatch), too. I won't even tell you how many devices I have on my person on a given day!

**Social platforms** have also driven scale. The diagram below (from 2012) gives a good perspective on the insane scale of most social platforms, like Facebook. Empires (anybody remember Farmville?) have been built and destroyed on the strength of piggybacking on these social platforms alone.

.A connected world in 60 seconds
image::images/connected-world-in-60-s.png[]


### Agility
It's hard to know whether scale begat agility, or the other way around! Either way,  the marketplace _pivots_ (pardon me) on a dime today and applications must keep up. Cloud computing makes it easy for companies (like SalesForce, or Zynga) to deliver _seasonal_ iterations on their flagship software-as-a-service offerings. Millionairre-making software on the Apple App Store or the Google Play Store often has a lifetime of days or weeks. In more stalwart organizations, we've seen departmental initaitves do end-runs around traditional IT and take advantage of self-service cloud computing technologies. Need to deploy an application that lives and dies as part of a marketing initiative? Something that's designed solely to support adhoc responses to emergencies? Agility is of course as much about getting shippable code at launch as in subequent iteration.

###  The Microservice

So, with all of these things in mind. 

## A Pivotal Microservice is Agile

Today's applications need to be _agile_. As the markets move quickly, so too must boardroom directon translate into value in production. It's almost cliche to bandy around the term _agile_ today, but that's because the alternative is almost unthinkable! I assure you, the likes of Twitter, Netflix, and Google are *not* using _waterfall_! An agile process informs technology because agile organizations must build code that is shippable, and code that can be developed in an iterable way.

Obviously, Pivotal Labs (a part )

Today's applications need to be scalable
