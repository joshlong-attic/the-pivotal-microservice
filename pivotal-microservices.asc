# The Pivotal Microservice
Josh Long
//:doctype: book
:numbered: false
:CF:  Cloud Foundry
:toc: left
:toclevels: 4
:source-highlighter: prettify
:code-root: spring-doge-microservice
:snippets-root: snippets
:12f: http://12factor.net

At Pivotal, we're building the best platform for today's workloads. One architecture style in particular - _microservices_ - seems to best capture what is typical, and best, in a lot of the applications we've seen deployed on our platform and with our technology.

Though our company is new (launched April 2013), we owe our rich heritage to the foundational groups and technologies (Spring, Cloud Foundry, Pivotal Labs, RabbitMQ, Redis, our Apache Tomcat leadership, Greenplum, Gemfire, our Groovy-language leadership, etc.) that launched Pivotal. All of these technologies followed their own trajectories to arrive here, at a time where our customers are building radically different applications  than those of even 10 years ago.

## How Did We Get Here?
### Scale
The need for scale has changed the dynamics and economics of a modern applications and application architectures. We all know that Moore's law - named for Intel founder Gordon Moore - has not really been a law since the early 2000s when it became more cost effective to add more CPUs than to scale an individual CPU on a chip. To do more, applications would need to become more concurrent, to scale out. CSC claims that data-production will be 44000% larger in 2020 than 2009.

**Mobile technology** brought computers home. Many developing nations skipped terrestrial  telephony infrastructure altogether and instead went straight to mobile devices. When the era of the smart phone began in earnest with the iPhone (and Android soon thereafter), much of the world - not just the superpowers that had more ubiquitous access to computing infrastructure - ushered it in. This created a net-centric platform with access to untold millions (and billions) more that simply didn't exist before. Google's Larry Page said in 2012 that  http://www.androidcentral.com/larry-page-15-million-android-devices-activated-every-day[Google was seeing 15 million new Android devices activated] _every day_! iPhone activations tend to trend much further behind, but represents a staggering amount in any event, and taken together they represent a platform  that modern application developers would be foolish to ignore.

The **Internet-of-Things** is the logical extension of this growth. It is the idea that computing is immersive - a part of the everyday experience. We're already seeing it. The roads in Singapore, a small city-state in Asia, are connected via censors to a smart grid that helps operators understand (and optimize for) traffic patterns. You can buy refridgerators that are connected to the internet and that buy and sell their own power on the commodities markets!  The United Nations claims that by 2018, Earth will be home to 7.6 billion people and - by contrast - http://www.businessinsider.com/what-you-need-to-know-about-the-internet-of-things-2013-3?op=1#ixzz3FxCafwWe[there will be some 25 billion connected devices by 2015, and 50 billion by 2020, says Cisco, a maker of networking devices]. Of course, IPv6 is a reaction to this growth; after all, if you beleive Cisco, there'll be an average of more than 3 connected devices per person by 2015. This trend seems likely to increase with wearable computing (Google Glass, Apple iWatch), too. I won't even tell you how many devices I have on my person on a given day!

**Social platforms** have also driven scale. The diagram below (from 2012) gives a good perspective on the insane scale of most social platforms, like Facebook. Empires (anybody remember Farmville?) have been built and destroyed on the strength of piggybacking on these social platforms alone.

.A connected world in 60 seconds
image::images/connected-world-in-60-s.png[]


### Agility
It's hard to know whether scale begat agility, or the other way around! Either way,  the marketplace _pivots_ (pardon me) on a dime today and applications must keep up. Cloud computing makes it easy for companies (like SalesForce, or Zynga) to deliver _seasonal_ iterations on their flagship software-as-a-service offerings. Millionairre-making software on the Apple App Store or the Google Play Store often has a lifetime of days or weeks. In more stalwart organizations, we've seen departmental initaitves do end-runs around traditional IT and take advantage of self-service cloud computing technologies. Need to deploy an application that lives and dies as part of a marketing initiative? Something that's designed solely to support adhoc responses to emergencies? Agility is of course as much about getting shippable code at launch as in subequent iteration.

### Prometheus's Microservice

It's not hard to see why a cloud-computing centric, horizontally scalable, agile approach to developing applications  like microservices would take hold against the backdrop of all these drivers! If anything, you might wonder why it's taken this long! It's hard to point to any one thing, but here's my _$0.02_: it _hasn't_. You see, microservices aren't all that new - the really big players (Amazon, Twitter, eBay, Google, Yahoo!, LinkedIn, Netflix, etc.) have all discovered or built the constituent parts to microservices by themselves. They had to, in order to survive and succeed. When you think of microservices, think of a set of patterns and practices  that fall out of building modern, distributed systems.

Enough organizations had to _discover_ these patterns before we - as a community - could distill them out and describe them. Many of these organizations have also open-sourced some of their work - or at least their ideas,   in the form of whitepapers. Where there was no credible (ideally open-source) solution, Pivotal has  filled in the gaps. If you take all these approaches and implementations together, you get what we think is the best microservice platform and stack out there. Let's take a look at what makes a  _Pivotal microservice_.




## A Pivotal Microservice is Agile

Today's applications need to be _agile_. As the markets move quickly, so too must boardroom directon translate into value in production. It's almost cliche to bandy around the term _agile_ today, but that's because the alternative is almost unthinkable! I assure you, the likes of Twitter, Netflix, and Google are *not* using _waterfall_! An agile process informs technology because agile organizations must build code that is shippable, and code that can be developed in an iterable way.

### A Microservice Should be Singly-Focused
// lamda architecture lets u compose bigger solutions out of smaller ones. think of the unix pipes & filters model.
// build the smallest thing that could possibly work. hiw small is small? fred geoge & 100loc; this lets components be developed and deployed w/o waiting for other teams.  it also means that a service should use the right tool for the job: ur not being forced to use oracle anymore. not every nail needs an oracle hammer. instead, use the best tool for the job. want SQL? Use Postgres (its easy w/ CFs marketplace or inbuilt services to add this). Want GIS or file store persistence? Use MongoDB. Want graph features? Use Neo4j. dont worry about deplpoyment complexity, because ur bulds should be easy/reproduceable, anywho (see the point about manifests and CF removing the frition in trying out new stuff)

// todo ### a microservice is test-driven
// it should be easy to unit test code. very much in keeping w/ that philosophy, services should be developed to be as small and singly focused as possible. isolate covariants and keep them separate. spring's got amazing unit testing support. Talk about Jasmine, too.

### Easy from Inception to Production; Iteration is key
//  spring boot (start.spring.io), look how easy it is to get a working application up and running w/ Boot!
// less relevant, but still an impokrtant part of the story, Pivotal Trakcer happens to be a great way to manage agile based development. it's a natural workflow for those that are continuously delivering value.

### production-ready
// show the boot actuator & metrics bits; show that CF makes it easy to get reproducible builds w/ manifests.yml;

## A Pivotal Microservice is Resilient to Failure
### PCF & heartbeat
### Spring Cloud & Hystrix
### Service Death Might just be the platform helping u out.
// after all, it could just be moving a node from one box to another in the case of an outage
//- light, resilient to failure, death (they should be easy to start, kill, at a moments notice); theyre quick to start, stop. can die  at a moments notice; no long running HTTP svcs. u can stop listening to http and refuse incoming requests; netflix chaos monkey; choregraphy vs orchestration (eg, react to failure per service)



// ----------------------------------------------------------
## A Pivotal Microservice is Portable

A microservice should  be _portable_. Portability affects various layers of the microservice.

A microservice should ideally run on both a developer's local machine _and_ the production environment with a minimum of (ideally, configuration-only) changes. This point is really well articulated in the  {12f}/dev-prod-parity[12-Factor manifesto's page on development and production parity]. An application with few-to-no gaps between development and production can be continuously deployed with more confidence. This is part of the _agile_ nature of a Pivotal microservice.

An application written for  Cloud Foundry   takes advantage of open, commodity backing services like PostgreSQL, RabbitMQ, and Redis so that developers can acheive identical stacks in local, staging and production environments without being tied to proprietary APIs like Amazon's SQS or Google App Engine's task queue.

Configuration about network attached backing services is exposed in a unform way on {CF}, through process environment variables (like `VCAP_SERVICES`). Applications written to run on {CF} benefit from this uniform, easily-reproduced interface for service configuration.

Spring Boot and Spring Cloud makes it even easier to work with this configuration by normalizing configuration coming from external variables, property (or `.yml`) files, Java `-D` arguments, etc.

// example code demonstrating configuration that runs in PCF || 127.0.0.1 safely

Spring, fundamentally, is an inversion-of-control container.

// example code that can be made to run

Applications that run on Cloud Foundry are, of course, not required to stay on Cloud Foundry. You might start your application on Pivotal's hosted, public, Cloud Foundry-based Pivotal Web Services, then decide to move things in-house on your own Cloud Foundry installation using Pivotal Cloud Foundry. Don't want to use either? Use any of the many Cloud Foundry-based services and products provided by ecosystem partners, like IBM's BlueMix. And, assuming you've exposed service configuratino as environment variables, there's no reason you couldn't run the application unchanged on another PaaS altogether.



A microservice running on Cloud Foundry
 - does the microservice run on developer's local machine and the production machine with parity?
 - does the application itself run on many platforms? Can a microservice, for example, be made to run on

// portable (env vars, written to a higher level stack like posix, cf, etc., uses common open technologies wherever possible)
### CF for PaaS independence
// use CF for PaaS independeance ; it's open-source, multi distro. Run on PCF or PWS. Or anywhere else. Or in-datacenter. or, since its basically an assembly of open components, ...
### Open services like PostgreSQL, MongoDB, Redis, Hadoop
// dont get locked into proprietary components (a la Google App Engine!) (i think this is also a 12f ref point as well)
### Spring makes it easy to stay platform agnostic
// and finally, use Spring and its IoC to make ur code as platform-agnostic as possible. (paas connectors, but even just configuration works too)

## A Pivotal Microservice is Configurable
// reference the varous 12f points re: condfiguration
### look at how Spring Boot normalizes configuration (env, --D, application.(yml,properties), etc.)
### Spring Cloud config-service.
### Spring Cloud refreshable configuration
### CF env vars
### CF manifests


## A Pivotal Microservice Should Play Well with Others
### Spring Cloud Eureka to handle service discocery
### using Spring Cloud SSO to secure service-to-service communication


## A Pivotal Microservice is Data-Driven
### XD makes crunching and managing data easy
### built on the shoulders of Spring Batch & Integration
### PHD & HAWK are awesome.

##  A Pivotal Microservice is Scalable
### Process -Centric Concurrency
### Basic PCF Auto-Scaling
### no Session State!
//systems should not rely on the service or session state associate w/ that service being around later. file system state shoudl be transactional in nature only (e.g, upload and process a file, then write to a MongoDB or something, )
// requires that applications behave accordingly: if u need HTTP session state, use Spring Session & Redis
// RabbitMQ is a dumb pipe





## Conclusion

## Technology Glossary
// todo: find an introduction video to each of these technologies to link to in this glossary!
- http://redis.io[**Redis**] is an Apache 2 licensed distributed data-structure service that makes it a snap to get cluster-visible collections (like a `java.util.Map<K,V>` or a `java.util.Set<T>` or a `java.util.List<T`). It's commonly used for  caching, for example at Twitter.
- http://rabbitmq.com[**RabbitMQ**] is an Apache 2 licensed message queue that implements the open AMQP protocol. AMQP was defined by a working group of banks that needed highly available messaging that worked language- and platform-agnostic way. Because it's open-source, it works well with other AMQP brokers, though you won't often need that support as RabbitMQ is very capable. It provides full HA support,  transactional message production and consumption, and more. It is the most ubiquitous message queue in the cloud, surpassing even Amazon's own SQS in AWS deployments. It is used, for example, for the highly available chat system that powers the Huffington Post, and to scale the Indian  national identity service  that serves India's 1.2 billion people.
- http://cloudfoundry.org[**Cloud Foundry**] is an Apache 2 licensed Platform-as-a-Service that makes it easy to manage applications. It transparently provides services like routing, clustering, service-brokering, and scaling for the developer in a uniform way. It is used, for example, by Baidu, the world's 4th largest search engine (or 3rd, if you don't count Yahoo! which, after all, is powered by Bing these days).
